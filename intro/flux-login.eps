%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 280 575 511
%%Creator: yExport 1.2
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Wednesday, October 5, 2011 11:53:01 AM EDT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
666 277 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
666.000 0.00000 l
666.000 277.000 l
0.00000 277.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 666 277 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 9.00000 264.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
-9.00000 -264.000 m
657.000 -264.000 l
657.000 13.0000 l
-9.00000 13.0000 l
-9.00000 -264.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 9.00000 264.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 9.00000 264.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 9.00000 264.000 ] defaultmatrix matrix concatmatrix setmatrix
.200000 .400000 1.00000 RG
newpath
6.00000 -245.000 m
6.00000 -6.00000 l
6.00000 -3.79086 7.79086 -2.00000 10.0000 -2.00000  c
638.000 -2.00000 l
640.209 -2.00000 642.000 -3.79086 642.000 -6.00000  c
642.000 -245.000 l
642.000 -247.209 640.209 -249.000 638.000 -249.000  c
10.0000 -249.000 l
7.79086 -249.000 6.00000 -247.209 6.00000 -245.000  c
h
f
0.00000 0.00000 0.00000 RG
newpath
84.3918 -209.162 m
84.3918 -224.765 l
81.8113 -224.765 l
81.8113 -227.927 l
84.3918 -227.927 l
84.3918 -229.277 l
84.3918 -234.142 86.6990 -236.574 91.3132 -236.574  c
92.8057 -236.574 94.3438 -236.358 95.9275 -235.925  c
95.9275 -232.507 l
94.4919 -233.111 93.2045 -233.413 92.0652 -233.413  c
90.3220 -233.413 89.4504 -232.097 89.4504 -229.465  c
89.4504 -227.927 l
94.2014 -227.927 l
94.2014 -224.765 l
89.4504 -224.765 l
89.4504 -209.162 l
h
98.3713 -209.162 m
98.3713 -236.147 l
103.430 -236.147 l
103.430 -209.162 l
h
121.357 -209.162 m
121.357 -212.700 l
119.717 -210.056 117.586 -208.735 114.966 -208.735  c
113.291 -208.735 111.969 -209.265 111.001 -210.324  c
110.032 -211.384 109.548 -212.831 109.548 -214.665  c
109.548 -227.927 l
114.607 -227.927 l
114.607 -215.913 l
114.607 -213.782 115.319 -212.717 116.743 -212.717  c
118.338 -212.717 119.876 -213.850 121.357 -216.118  c
121.357 -227.927 l
126.416 -227.927 l
126.416 -209.162 l
h
130.740 -209.162 m
137.182 -218.579 l
131.013 -227.927 l
136.772 -227.927 l
140.805 -221.979 l
144.668 -227.927 l
148.769 -227.927 l
142.890 -218.715 l
149.197 -209.162 l
143.437 -209.162 l
139.233 -215.366 l
134.927 -209.162 l
h
153.623 -218.442 m
153.623 -221.604 l
169.226 -221.604 l
169.226 -218.442 l
h
175.771 -209.162 m
175.771 -236.147 l
180.830 -236.147 l
180.830 -209.162 l
h
195.031 -208.735 m
192.103 -208.735 189.776 -209.621 188.050 -211.392  c
186.324 -213.164 185.461 -215.548 185.461 -218.544  c
185.461 -221.575 186.330 -223.968 188.067 -225.722  c
189.805 -227.477 192.166 -228.354 195.151 -228.354  c
198.148 -228.354 200.514 -227.477 202.252 -225.722  c
203.989 -223.968 204.858 -221.586 204.858 -218.579  c
204.858 -215.502 203.987 -213.093 202.243 -211.350  c
200.500 -209.606 198.096 -208.735 195.031 -208.735  c
h
195.117 -211.896 m
198.022 -211.896 199.475 -214.124 199.475 -218.579  c
199.475 -220.618 199.090 -222.230 198.321 -223.415  c
197.552 -224.600 196.496 -225.192 195.151 -225.192  c
193.818 -225.192 192.767 -224.600 191.998 -223.415  c
191.229 -222.230 190.844 -220.607 190.844 -218.544  c
190.844 -216.505 191.226 -214.887 191.990 -213.691  c
192.753 -212.495 193.795 -211.896 195.117 -211.896  c
h
209.643 -203.334 m
210.053 -207.009 l
212.138 -206.052 214.127 -205.573 216.018 -205.573  c
217.886 -205.573 219.236 -205.972 220.068 -206.770  c
220.900 -207.567 221.316 -208.860 221.316 -210.649  c
221.316 -213.212 l
220.085 -210.512 218.052 -209.162 215.215 -209.162  c
212.982 -209.162 211.210 -209.997 209.900 -211.666  c
208.589 -213.335 207.934 -215.594 207.934 -218.442  c
207.934 -221.438 208.669 -223.839 210.139 -225.645  c
211.609 -227.451 213.563 -228.354 216.001 -228.354  c
217.915 -228.354 219.686 -227.579 221.316 -226.030  c
221.845 -227.927 l
226.391 -227.927 l
226.391 -213.605 l
226.391 -210.746 226.218 -208.684 225.870 -207.419  c
225.523 -206.154 224.848 -205.078 223.845 -204.189  c
222.159 -202.731 219.783 -202.001 216.719 -202.001  c
214.542 -202.001 212.184 -202.446 209.643 -203.334  c
h
221.316 -216.152 m
221.316 -223.073 l
220.097 -224.452 218.821 -225.141 217.488 -225.141  c
216.212 -225.141 215.198 -224.560 214.446 -223.398  c
213.694 -222.236 213.318 -220.675 213.318 -218.715  c
213.318 -215.047 214.497 -213.212 216.855 -213.212  c
218.484 -213.212 219.971 -214.192 221.316 -216.152  c
h
232.595 -209.162 m
232.595 -227.927 l
237.654 -227.927 l
237.654 -209.162 l
h
232.595 -231.088 m
232.595 -235.310 l
237.654 -235.310 l
237.654 -231.088 l
h
243.977 -209.162 m
243.977 -227.927 l
249.035 -227.927 l
249.035 -224.389 l
250.687 -227.032 252.818 -228.354 255.427 -228.354  c
257.102 -228.354 258.423 -227.824 259.392 -226.765  c
260.360 -225.705 260.844 -224.258 260.844 -222.424  c
260.844 -209.162 l
255.786 -209.162 l
255.786 -221.176 l
255.786 -223.307 255.080 -224.372 253.667 -224.372  c
252.060 -224.372 250.517 -223.238 249.035 -220.971  c
249.035 -209.162 l
h
265.390 -209.162 m
265.390 -214.648 l
270.876 -214.648 l
270.876 -209.162 l
h
290.888 -209.794 m
288.484 -209.088 286.206 -208.735 284.052 -208.735  c
280.919 -208.735 278.447 -209.624 276.635 -211.401  c
274.824 -213.178 273.918 -215.605 273.918 -218.681  c
273.918 -221.586 274.747 -223.925 276.405 -225.697  c
278.062 -227.468 280.253 -228.354 282.976 -228.354  c
285.722 -228.354 287.727 -227.488 288.991 -225.756  c
290.256 -224.025 290.888 -221.285 290.888 -217.536  c
279.250 -217.536 l
279.592 -213.959 281.557 -212.170 285.146 -212.170  c
286.844 -212.170 288.758 -212.563 290.888 -213.349  c
h
279.182 -220.390 m
285.915 -220.390 l
285.915 -223.592 284.884 -225.192 282.822 -225.192  c
280.726 -225.192 279.512 -223.592 279.182 -220.390  c
h
296.118 -209.162 m
296.118 -227.927 l
301.177 -227.927 l
301.177 -224.389 l
302.829 -227.032 304.959 -228.354 307.568 -228.354  c
309.243 -228.354 310.565 -227.824 311.533 -226.765  c
312.501 -225.705 312.986 -224.258 312.986 -222.424  c
312.986 -209.162 l
307.927 -209.162 l
307.927 -221.176 l
307.927 -223.307 307.221 -224.372 305.808 -224.372  c
304.201 -224.372 302.658 -223.238 301.177 -220.971  c
301.177 -209.162 l
h
319.240 -203.334 m
319.651 -207.009 l
321.736 -206.052 323.724 -205.573 325.615 -205.573  c
327.483 -205.573 328.834 -205.972 329.665 -206.770  c
330.497 -207.567 330.913 -208.860 330.913 -210.649  c
330.913 -213.212 l
329.682 -210.512 327.649 -209.162 324.812 -209.162  c
322.579 -209.162 320.807 -209.997 319.497 -211.666  c
318.187 -213.335 317.531 -215.594 317.531 -218.442  c
317.531 -221.438 318.266 -223.839 319.736 -225.645  c
321.206 -227.451 323.160 -228.354 325.598 -228.354  c
327.512 -228.354 329.284 -227.579 330.913 -226.030  c
331.443 -227.927 l
335.989 -227.927 l
335.989 -213.605 l
335.989 -210.746 335.815 -208.684 335.467 -207.419  c
335.120 -206.154 334.445 -205.078 333.442 -204.189  c
331.756 -202.731 329.380 -202.001 326.316 -202.001  c
324.140 -202.001 321.781 -202.446 319.240 -203.334  c
h
330.913 -216.152 m
330.913 -223.073 l
329.694 -224.452 328.418 -225.141 327.085 -225.141  c
325.809 -225.141 324.795 -224.560 324.043 -223.398  c
323.291 -222.236 322.915 -220.675 322.915 -218.715  c
322.915 -215.047 324.094 -213.212 326.452 -213.212  c
328.082 -213.212 329.568 -214.192 330.913 -216.152  c
h
342.192 -209.162 m
342.192 -227.927 l
347.251 -227.927 l
347.251 -209.162 l
h
342.192 -231.088 m
342.192 -235.310 l
347.251 -235.310 l
347.251 -231.088 l
h
353.574 -209.162 m
353.574 -227.927 l
358.633 -227.927 l
358.633 -224.389 l
360.285 -227.032 362.415 -228.354 365.024 -228.354  c
366.699 -228.354 368.021 -227.824 368.989 -226.765  c
369.957 -225.705 370.442 -224.258 370.442 -222.424  c
370.442 -209.162 l
365.383 -209.162 l
365.383 -221.176 l
365.383 -223.307 364.677 -224.372 363.264 -224.372  c
361.657 -224.372 360.114 -223.238 358.633 -220.971  c
358.633 -209.162 l
h
374.988 -209.162 m
374.988 -214.648 l
380.473 -214.648 l
380.473 -209.162 l
h
396.811 -209.162 m
396.811 -212.700 l
395.171 -210.056 393.040 -208.735 390.420 -208.735  c
388.745 -208.735 387.423 -209.265 386.455 -210.324  c
385.486 -211.384 385.002 -212.831 385.002 -214.665  c
385.002 -227.927 l
390.061 -227.927 l
390.061 -215.913 l
390.061 -213.782 390.773 -212.717 392.197 -212.717  c
393.792 -212.717 395.330 -213.850 396.811 -216.118  c
396.811 -227.927 l
401.870 -227.927 l
401.870 -209.162 l
h
408.193 -209.162 m
408.193 -227.927 l
413.047 -227.927 l
413.047 -224.389 l
414.528 -227.032 416.635 -228.354 419.370 -228.354  c
420.783 -228.354 421.945 -228.007 422.856 -227.312  c
423.768 -226.617 424.326 -225.642 424.531 -224.389  c
426.286 -227.032 428.405 -228.354 430.888 -228.354  c
434.318 -228.354 436.032 -226.463 436.032 -222.680  c
436.032 -209.162 l
431.179 -209.162 l
431.179 -221.022 l
431.179 -223.244 430.438 -224.355 428.957 -224.355  c
427.442 -224.355 425.967 -223.261 424.531 -221.074  c
424.531 -209.162 l
419.677 -209.162 l
419.677 -221.022 l
419.677 -223.256 418.931 -224.372 417.439 -224.372  c
415.946 -224.372 414.482 -223.273 413.047 -221.074  c
413.047 -209.162 l
h
442.134 -209.162 m
442.134 -227.927 l
447.192 -227.927 l
447.192 -209.162 l
h
442.134 -231.088 m
442.134 -235.310 l
447.192 -235.310 l
447.192 -231.088 l
h
467.358 -209.572 m
465.262 -209.014 463.319 -208.735 461.531 -208.735  c
458.534 -208.735 456.167 -209.615 454.430 -211.375  c
452.692 -213.135 451.823 -215.531 451.823 -218.562  c
451.823 -221.626 452.718 -224.025 454.507 -225.756  c
456.295 -227.488 458.768 -228.354 461.924 -228.354  c
463.450 -228.354 465.211 -228.109 467.204 -227.619  c
467.204 -223.962 l
465.131 -224.634 463.473 -224.970 462.231 -224.970  c
460.716 -224.970 459.497 -224.389 458.574 -223.227  c
457.651 -222.065 457.190 -220.521 457.190 -218.596  c
457.190 -216.625 457.688 -215.047 458.685 -213.862  c
459.682 -212.677 461.012 -212.084 462.676 -212.084  c
464.191 -212.084 465.752 -212.415 467.358 -213.076  c
h
472.143 -209.162 m
472.143 -236.147 l
477.202 -236.147 l
477.202 -224.389 l
478.854 -227.032 480.984 -228.354 483.594 -228.354  c
485.268 -228.354 486.590 -227.824 487.558 -226.765  c
488.527 -225.705 489.011 -224.258 489.011 -222.424  c
489.011 -209.162 l
483.952 -209.162 l
483.952 -221.176 l
483.952 -223.307 483.246 -224.372 481.833 -224.372  c
480.227 -224.372 478.683 -223.238 477.202 -220.971  c
477.202 -209.162 l
h
493.557 -209.162 m
493.557 -214.648 l
499.043 -214.648 l
499.043 -209.162 l
h
519.055 -209.794 m
516.651 -209.088 514.372 -208.735 512.219 -208.735  c
509.086 -208.735 506.614 -209.624 504.802 -211.401  c
502.990 -213.178 502.085 -215.605 502.085 -218.681  c
502.085 -221.586 502.914 -223.925 504.571 -225.697  c
506.229 -227.468 508.419 -228.354 511.142 -228.354  c
513.888 -228.354 515.893 -227.488 517.158 -225.756  c
518.423 -224.025 519.055 -221.285 519.055 -217.536  c
507.417 -217.536 l
507.759 -213.959 509.724 -212.170 513.313 -212.170  c
515.010 -212.170 516.924 -212.563 519.055 -213.349  c
h
507.348 -220.390 m
514.082 -220.390 l
514.082 -223.592 513.051 -225.192 510.989 -225.192  c
508.892 -225.192 507.679 -223.592 507.348 -220.390  c
h
536.094 -209.162 m
536.094 -212.700 l
534.795 -210.056 532.750 -208.735 529.958 -208.735  c
527.702 -208.735 525.931 -209.561 524.643 -211.213  c
523.356 -212.865 522.712 -215.138 522.712 -218.032  c
522.712 -221.176 523.438 -223.683 524.891 -225.551  c
526.344 -227.420 528.295 -228.354 530.744 -228.354  c
532.704 -228.354 534.487 -227.579 536.094 -226.030  c
536.094 -236.147 l
541.169 -236.147 l
541.169 -209.162 l
h
536.094 -223.022 m
534.874 -224.389 533.570 -225.073 532.180 -225.073  c
530.938 -225.073 529.947 -224.475 529.206 -223.278  c
528.466 -222.082 528.095 -220.476 528.095 -218.459  c
528.095 -214.619 529.326 -212.700 531.787 -212.700  c
533.291 -212.700 534.726 -213.662 536.094 -215.588  c
h
559.079 -209.162 m
559.079 -212.700 l
557.439 -210.056 555.308 -208.735 552.688 -208.735  c
551.013 -208.735 549.691 -209.265 548.723 -210.324  c
547.754 -211.384 547.270 -212.831 547.270 -214.665  c
547.270 -227.927 l
552.329 -227.927 l
552.329 -215.913 l
552.329 -213.782 553.041 -212.717 554.465 -212.717  c
556.060 -212.717 557.598 -213.850 559.079 -216.118  c
559.079 -227.927 l
564.138 -227.927 l
564.138 -209.162 l
h
f
.200000 .400000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
6.00000 -245.000 m
6.00000 -6.00000 l
6.00000 -3.79086 7.79086 -2.00000 10.0000 -2.00000  c
638.000 -2.00000 l
640.209 -2.00000 642.000 -3.79086 642.000 -6.00000  c
642.000 -245.000 l
642.000 -247.209 640.209 -249.000 638.000 -249.000  c
10.0000 -249.000 l
7.79086 -249.000 6.00000 -247.209 6.00000 -245.000  c
h
S
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
198.500 -173.131 m
198.500 -133.131 l
198.500 -130.922 200.291 -129.131 202.500 -129.131  c
445.500 -129.131 l
447.709 -129.131 449.500 -130.922 449.500 -133.131  c
449.500 -173.131 l
449.500 -175.340 447.709 -177.131 445.500 -177.131  c
202.500 -177.131 l
200.291 -177.131 198.500 -175.340 198.500 -173.131  c
h
f
0.00000 0.00000 0.00000 RG
newpath
252.998 -143.683 m
252.998 -154.828 l
251.155 -154.828 l
251.155 -157.086 l
252.998 -157.086 l
252.998 -158.051 l
252.998 -161.526 254.646 -163.263 257.942 -163.263  c
259.008 -163.263 260.106 -163.109 261.238 -162.799  c
261.238 -160.358 l
260.212 -160.789 259.293 -161.005 258.479 -161.005  c
257.234 -161.005 256.611 -160.065 256.611 -158.185  c
256.611 -157.086 l
260.005 -157.086 l
260.005 -154.828 l
256.611 -154.828 l
256.611 -143.683 l
h
262.983 -143.683 m
262.983 -162.958 l
266.596 -162.958 l
266.596 -143.683 l
h
279.402 -143.683 m
279.402 -146.210 l
278.230 -144.322 276.708 -143.378 274.836 -143.378  c
273.640 -143.378 272.696 -143.756 272.004 -144.513  c
271.312 -145.270 270.967 -146.304 270.967 -147.614  c
270.967 -157.086 l
274.580 -157.086 l
274.580 -148.505 l
274.580 -146.983 275.088 -146.222 276.106 -146.222  c
277.245 -146.222 278.344 -147.032 279.402 -148.651  c
279.402 -157.086 l
283.015 -157.086 l
283.015 -143.683 l
h
286.103 -143.683 m
290.705 -150.409 l
286.299 -157.086 l
290.412 -157.086 l
293.293 -152.838 l
296.052 -157.086 l
298.982 -157.086 l
294.782 -150.507 l
299.287 -143.683 l
295.173 -143.683 l
292.170 -148.114 l
289.094 -143.683 l
h
302.448 -150.311 m
302.448 -152.570 l
313.594 -152.570 l
313.594 -150.311 l
h
318.269 -143.683 m
318.269 -162.958 l
321.882 -162.958 l
321.882 -143.683 l
h
332.026 -143.378 m
329.935 -143.378 328.272 -144.011 327.040 -145.276  c
325.807 -146.542 325.190 -148.244 325.190 -150.385  c
325.190 -152.549 325.811 -154.258 327.052 -155.512  c
328.293 -156.765 329.979 -157.392 332.112 -157.392  c
334.252 -157.392 335.943 -156.765 337.184 -155.512  c
338.425 -154.258 339.045 -152.558 339.045 -150.409  c
339.045 -148.212 338.423 -146.491 337.177 -145.246  c
335.932 -144.000 334.215 -143.378 332.026 -143.378  c
h
332.087 -145.636 m
334.162 -145.636 335.200 -147.227 335.200 -150.409  c
335.200 -151.866 334.925 -153.017 334.376 -153.864  c
333.827 -154.710 333.072 -155.133 332.112 -155.133  c
331.159 -155.133 330.409 -154.710 329.859 -153.864  c
329.310 -153.017 329.035 -151.858 329.035 -150.385  c
329.035 -148.928 329.308 -147.772 329.853 -146.918  c
330.399 -146.063 331.143 -145.636 332.087 -145.636  c
h
342.463 -139.520 m
342.756 -142.145 l
344.245 -141.461 345.665 -141.120 347.016 -141.120  c
348.351 -141.120 349.315 -141.404 349.909 -141.974  c
350.503 -142.544 350.801 -143.467 350.801 -144.745  c
350.801 -146.576 l
349.922 -144.647 348.469 -143.683 346.443 -143.683  c
344.848 -143.683 343.582 -144.279 342.646 -145.471  c
341.710 -146.664 341.242 -148.277 341.242 -150.311  c
341.242 -152.452 341.767 -154.167 342.817 -155.457  c
343.867 -156.747 345.263 -157.392 347.004 -157.392  c
348.371 -157.392 349.637 -156.838 350.801 -155.731  c
351.179 -157.086 l
354.426 -157.086 l
354.426 -146.857 l
354.426 -144.814 354.302 -143.341 354.054 -142.438  c
353.806 -141.535 353.323 -140.766 352.607 -140.131  c
351.403 -139.089 349.706 -138.568 347.517 -138.568  c
345.962 -138.568 344.278 -138.886 342.463 -139.520  c
h
350.801 -148.676 m
350.801 -153.620 l
349.930 -154.604 349.018 -155.097 348.066 -155.097  c
347.155 -155.097 346.430 -154.682 345.893 -153.852  c
345.356 -153.021 345.088 -151.907 345.088 -150.507  c
345.088 -147.886 345.930 -146.576 347.615 -146.576  c
348.778 -146.576 349.840 -147.276 350.801 -148.676  c
h
358.857 -143.683 m
358.857 -157.086 l
362.470 -157.086 l
362.470 -143.683 l
h
358.857 -159.345 m
358.857 -162.360 l
362.470 -162.360 l
362.470 -159.345 l
h
366.987 -143.683 m
366.987 -157.086 l
370.600 -157.086 l
370.600 -154.560 l
371.780 -156.448 373.302 -157.392 375.166 -157.392  c
376.362 -157.392 377.306 -157.013 377.998 -156.256  c
378.690 -155.499 379.035 -154.466 379.035 -153.156  c
379.035 -143.683 l
375.422 -143.683 l
375.422 -152.265 l
375.422 -153.786 374.918 -154.547 373.908 -154.547  c
372.761 -154.547 371.658 -153.738 370.600 -152.118  c
370.600 -143.683 l
h
384.663 -143.683 m
384.663 -145.795 l
388.276 -145.795 l
388.276 -159.125 l
384.663 -158.222 l
384.663 -160.395 l
391.902 -162.201 l
391.902 -145.795 l
395.515 -145.795 l
395.515 -143.683 l
h
f
1.00000 .800000 0.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
198.500 -173.131 m
198.500 -133.131 l
198.500 -130.922 200.291 -129.131 202.500 -129.131  c
445.500 -129.131 l
447.709 -129.131 449.500 -130.922 449.500 -133.131  c
449.500 -173.131 l
449.500 -175.340 447.709 -177.131 445.500 -177.131  c
202.500 -177.131 l
200.291 -177.131 198.500 -175.340 198.500 -173.131  c
h
S
2 J
10.0000 M
1.00000 .800000 0.00000 RG
newpath
198.500 -95.1313 m
198.500 -55.1313 l
198.500 -52.9222 200.291 -51.1313 202.500 -51.1313  c
445.500 -51.1313 l
447.709 -51.1313 449.500 -52.9222 449.500 -55.1313  c
449.500 -95.1313 l
449.500 -97.3405 447.709 -99.1313 445.500 -99.1313  c
202.500 -99.1313 l
200.291 -99.1313 198.500 -97.3405 198.500 -95.1313  c
h
f
0.00000 0.00000 0.00000 RG
newpath
252.998 -65.6831 m
252.998 -76.8281 l
251.155 -76.8281 l
251.155 -79.0864 l
252.998 -79.0864 l
252.998 -80.0507 l
252.998 -83.5257 254.646 -85.2631 257.942 -85.2631  c
259.008 -85.2631 260.106 -85.1085 261.238 -84.7993  c
261.238 -82.3579 l
260.212 -82.7892 259.293 -83.0048 258.479 -83.0048  c
257.234 -83.0048 256.611 -82.0649 256.611 -80.1850  c
256.611 -79.0864 l
260.005 -79.0864 l
260.005 -76.8281 l
256.611 -76.8281 l
256.611 -65.6831 l
h
262.983 -65.6831 m
262.983 -84.9580 l
266.596 -84.9580 l
266.596 -65.6831 l
h
279.402 -65.6831 m
279.402 -68.2099 l
278.230 -66.3219 276.708 -65.3779 274.836 -65.3779  c
273.640 -65.3779 272.696 -65.7563 272.004 -66.5131  c
271.312 -67.2700 270.967 -68.3035 270.967 -69.6137  c
270.967 -79.0864 l
274.580 -79.0864 l
274.580 -70.5048 l
274.580 -68.9830 275.088 -68.2221 276.106 -68.2221  c
277.245 -68.2221 278.344 -69.0319 279.402 -70.6513  c
279.402 -79.0864 l
283.015 -79.0864 l
283.015 -65.6831 l
h
286.103 -65.6831 m
290.705 -72.4091 l
286.299 -79.0864 l
290.412 -79.0864 l
293.293 -74.8383 l
296.052 -79.0864 l
298.982 -79.0864 l
294.782 -72.5068 l
299.287 -65.6831 l
295.173 -65.6831 l
292.170 -70.1142 l
289.094 -65.6831 l
h
302.448 -72.3115 m
302.448 -74.5698 l
313.594 -74.5698 l
313.594 -72.3115 l
h
318.269 -65.6831 m
318.269 -84.9580 l
321.882 -84.9580 l
321.882 -65.6831 l
h
332.026 -65.3779 m
329.935 -65.3779 328.272 -66.0106 327.040 -67.2761  c
325.807 -68.5415 325.190 -70.2444 325.190 -72.3847  c
325.190 -74.5494 325.811 -76.2584 327.052 -77.5117  c
328.293 -78.7649 329.979 -79.3916 332.112 -79.3916  c
334.252 -79.3916 335.943 -78.7649 337.184 -77.5117  c
338.425 -76.2584 339.045 -74.5576 339.045 -72.4091  c
339.045 -70.2119 338.423 -68.4907 337.177 -67.2456  c
335.932 -66.0005 334.215 -65.3779 332.026 -65.3779  c
h
332.087 -67.6362 m
334.162 -67.6362 335.200 -69.2272 335.200 -72.4091  c
335.200 -73.8658 334.925 -75.0174 334.376 -75.8637  c
333.827 -76.7101 333.072 -77.1333 332.112 -77.1333  c
331.159 -77.1333 330.409 -76.7101 329.859 -75.8637  c
329.310 -75.0174 329.035 -73.8577 329.035 -72.3847  c
329.035 -70.9280 329.308 -69.7724 329.853 -68.9179  c
330.399 -68.0634 331.143 -67.6362 332.087 -67.6362  c
h
342.463 -61.5205 m
342.756 -64.1450 l
344.245 -63.4614 345.665 -63.1196 347.016 -63.1196  c
348.351 -63.1196 349.315 -63.4044 349.909 -63.9741  c
350.503 -64.5437 350.801 -65.4674 350.801 -66.7451  c
350.801 -68.5761 l
349.922 -66.6474 348.469 -65.6831 346.443 -65.6831  c
344.848 -65.6831 343.582 -66.2792 342.646 -67.4714  c
341.710 -68.6636 341.242 -70.2770 341.242 -72.3115  c
341.242 -74.4518 341.767 -76.1669 342.817 -77.4567  c
343.867 -78.7466 345.263 -79.3916 347.004 -79.3916  c
348.371 -79.3916 349.637 -78.8382 350.801 -77.7314  c
351.179 -79.0864 l
354.426 -79.0864 l
354.426 -68.8569 l
354.426 -66.8143 354.302 -65.3413 354.054 -64.4380  c
353.806 -63.5346 353.323 -62.7656 352.607 -62.1308  c
351.403 -61.0892 349.706 -60.5683 347.517 -60.5683  c
345.962 -60.5683 344.278 -60.8857 342.463 -61.5205  c
h
350.801 -70.6757 m
350.801 -75.6196 l
349.930 -76.6043 349.018 -77.0966 348.066 -77.0966  c
347.155 -77.0966 346.430 -76.6816 345.893 -75.8515  c
345.356 -75.0214 345.088 -73.9065 345.088 -72.5068  c
345.088 -69.8864 345.930 -68.5761 347.615 -68.5761  c
348.778 -68.5761 349.840 -69.2760 350.801 -70.6757  c
h
358.857 -65.6831 m
358.857 -79.0864 l
362.470 -79.0864 l
362.470 -65.6831 l
h
358.857 -81.3447 m
358.857 -84.3598 l
362.470 -84.3598 l
362.470 -81.3447 l
h
366.987 -65.6831 m
366.987 -79.0864 l
370.600 -79.0864 l
370.600 -76.5595 l
371.780 -78.4476 373.302 -79.3916 375.166 -79.3916  c
376.362 -79.3916 377.306 -79.0131 377.998 -78.2563  c
378.690 -77.4995 379.035 -76.4659 379.035 -75.1557  c
379.035 -65.6831 l
375.422 -65.6831 l
375.422 -74.2646 l
375.422 -75.7864 374.918 -76.5473 373.908 -76.5473  c
372.761 -76.5473 371.658 -75.7376 370.600 -74.1181  c
370.600 -65.6831 l
h
382.942 -65.6831 m
382.942 -68.5395 l
383.137 -68.8081 l
384.105 -70.1020 385.098 -71.1925 386.115 -72.0796  c
387.593 -73.3857 l
390.026 -75.5341 391.242 -77.4181 391.242 -79.0376  c
391.242 -80.9256 390.168 -81.8696 388.020 -81.8696  c
386.693 -81.8696 385.155 -81.4220 383.406 -80.5268  c
383.406 -83.1757 l
385.245 -83.8593 387.023 -84.2011 388.740 -84.2011  c
390.661 -84.2011 392.199 -83.7474 393.354 -82.8400  c
394.510 -81.9327 395.088 -80.7181 395.088 -79.1963  c
395.088 -78.1464 394.807 -77.1902 394.245 -76.3276  c
393.684 -75.4650 392.695 -74.4640 391.279 -73.3247  c
390.058 -72.3481 l
388.358 -70.9809 387.348 -69.7114 387.031 -68.5395  c
395.014 -68.5395 l
395.014 -65.6831 l
h
f
1.00000 .800000 0.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
198.500 -95.1313 m
198.500 -55.1313 l
198.500 -52.9222 200.291 -51.1313 202.500 -51.1313  c
445.500 -51.1313 l
447.709 -51.1313 449.500 -52.9222 449.500 -55.1313  c
449.500 -95.1313 l
449.500 -97.3405 447.709 -99.1313 445.500 -99.1313  c
202.500 -99.1313 l
200.291 -99.1313 198.500 -97.3405 198.500 -95.1313  c
h
S
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
